#!/usr/bin/env node
/** Module dependencies. */
var app = require('../app'); var debug = require('debug')('wssechoserver:server');
//var http = require('http');//-
var https = require('https'); var fs = require("fs");//+
/** Get port from environment and store in Express. */
var port = normalizePort(process.env.PORT || '3000'); app.set('port', port);

/** Create server. */
//var server = http.createServer(app);//-
var privateKey  = fs.readFileSync('../secure/nginx.key', 'utf8');//+
var certificate = fs.readFileSync('../secure/nginx.crt', 'utf8')//+
var credentials = {key: privateKey, cert: certificate};//+
var httpsServer = https.createServer(credentials, app);//+

/** Listen on provided port, on all network interfaces. */
// server.listen(port);//-
// server.on('error', onError);//-
// server.on('listening', onListening);//-

httpsServer.listen(443);//+
httpsServer.on('error', onError);//+
httpsServer.on('listening', onListening);//+

function normalizePort(val) {/** Normalize a port into a number, string, or false. */
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {/** Event listener for HTTP server "error" event. */
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {/** Event listener for HTTP server "listening" event. */
  // var addr = server.address();//-
  var addr = httpsServer.address();//+
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind); console.log('Listening on ' + bind);//+
}

var WebSocketServer = require('ws').Server;//+
var wss = new WebSocketServer({server: httpsServer});//+
wss.on('connection', function connection(ws) {console.log('wss connected');//+
  ws.on('message', function incoming(message) {console.log('received: %s', message);//+
	ws.send('NodeJS WSS receive the following msg: '+message);});//+
  ws.send('Hi client, WSS connection is Established');//+
});//+

